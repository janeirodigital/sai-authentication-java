name: Publish Release

on:
  workflow_dispatch:
    inputs:
      increment_type:
        description: 'Version increment level'
        required: true
        default: 'patch'
        type: choice
        options: [ 'major', 'minor', 'patch' ]
      is_draft_release:
        description: 'Is this a draft (not finalized) release?'
        required: true
        type: boolean
        default: false
      is_prerelease:
        description: 'Is this a prerelease (not production ready)?'
        required: true
        type: boolean
        default: false
      summary:
        description: 'Release summary'
        type: string
        required: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
          server-id: jd-oss-github # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          settings-path: ${{ github.workspace }} # location for the settings.xml file
        env:
          MAVEN_USERNAME: ${{ secrets.JD_OSS_MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.JD_OSS_MAVEN_PASSWORD }}
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      # All commits to git will be signed with the GPG key of xformer-bot
      - name: Install GPG key for signing commits
        id: install-gpg-key
        env:
          XFORMER_BOT_GPG_KEY: ${{ secrets.XFORMER_BOT_GPG_KEY }}
          XFORMER_BOT_GPG_PASSPHRASE: ${{ secrets.XFORMER_BOT_GPG_PASSPHRASE }}
        run: |
          echo $XFORMER_BOT_GPG_KEY | base64 --decode | gpg --batch --import
          echo $XFORMER_BOT_GPG_PASSPHRASE | gpg --batch --passphrase-fd 0 --pinentry-mode loopback --import-ownertrust
          gpg --list-keys --keyid-format LONG
      # Configure the git user with the name and email of xformer-bot
      - name: Configure git user
        run: |
          git config --global user.name ${{ vars.XFORMER_BOT_USERNAME }}
          git config --global user.email ${{ vars.XFORMER_BOT_EMAIL }}
      # Determine the proper release version based on the increment_type input
      - name: Determine release version
        id: determine-release-version
        run: |
          if [ "${{ github.event.inputs.increment_type }}" = "major" ]; then
            echo "RELEASE_VERSION_FLAG='-DautoVersionIncrementMajor=true'" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.increment_type }}" = "minor" ]; then
            echo "RELEASE_VERSION_FLAG='-DautoVersionIncrementMinor=true'" >> $GITHUB_OUTPUT
          else
            echo "RELEASE_VERSION_FLAG='-DautoVersionIncrement=true'" >> $GITHUB_OUTPUT
          fi
      # Run the maven release preparation goal to create the release tag and bump the version
      - name: Prepare the release
        run: mvn -B release:prepare --file pom.xml -s ${{ github.workspace }}/settings.xml ${{ steps.determine-release-version.outputs.RELEASE_VERSION_FLAG }} -Dgpg.keyname=${{ secrets.XFORMER_BOT_GPG_KEY_ID }} -Dgpg.passphrase=${{ secrets.XFORMER_BOT_GPG_PASSPHRASE }}
        env:
          MAVEN_USERNAME: ${{ secrets.JD_OSS_MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.JD_OSS_MAVEN_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      # Deploy the release to the package repository
      - name: Perform the release
        run: mvn -B release:perform --file pom.xml -s ${{ github.workspace }}/settings.xml
        env:
          MAVEN_USERNAME: ${{ secrets.JD_OSS_MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.JD_OSS_MAVEN_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      ###############################################################
      # Get the tag created by the previous release step
      ###############################################################
      - name: Get previous tag
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"

      ###############################################################
      # Create a GitHub release from the previous tag
      ###############################################################
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Tag to create the github release from
          tag_name: ${{ steps.previoustag.outputs.tag }}
          # Name of the release (set to the tag)
          release_name: ${{ steps.previoustag.outputs.tag }}
          # Summary of the release
          body: ${{ github.event.inputs.summary }}
          # Whether this is a draft release or not
          draft: ${{ github.event.inputs.is_draft_release }}
          # Whether this is a prerelease or not
          prerelease: ${{ github.event.inputs.is_prerelease }}